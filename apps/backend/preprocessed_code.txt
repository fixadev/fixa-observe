# Constants and setup
number_line = NumberLine(
    x_range=[0, 120, 10],
    length=10,
    include_numbers=True,
    label_direction=DOWN
)
number_line.to_edge(UP, buff=1)

# Create initial division problem
dividend = Text("96").scale(1.5)
divisor = Text("8").scale(1.5)
division_symbol = Text("รท").scale(1.5)

division_problem = VGroup(dividend, division_symbol, divisor).arrange(RIGHT, buff=0.5)
division_problem.next_to(number_line, DOWN, buff=1)

self.play(Create(number_line), Write(division_problem))

# Step 1: Divide 9 by 8
step1 = Text("Step 1: 9 รท 8 = 1 remainder 1").scale(0.8)
step1.next_to(division_problem, DOWN, buff=0.5)
self.play(Write(step1))

# Highlight 9 on number line
highlight_9 = Rectangle(height=0.5, width=0.5, color=YELLOW)
highlight_9.move_to(number_line.number_to_point(90))
self.play(Create(highlight_9))

# Show division process
arrow1 = Arrow(start=number_line.number_to_point(90), end=number_line.number_to_point(10), color=RED)
self.play(Create(arrow1))

# Step 2: Bring down 6
step2 = Text("Step 2: Bring down 6").scale(0.8)
step2.next_to(step1, DOWN, buff=0.5)
self.play(Write(step2))

# Highlight 16 on number line
highlight_16 = Rectangle(height=0.5, width=0.5, color=YELLOW)
highlight_16.move_to(number_line.number_to_point(16))
self.play(FadeOut(highlight_9), Create(highlight_16))

# Step 3: Divide 16 by 8
step3 = Text("Step 3: 16 รท 8 = 2 remainder 0").scale(0.8)
step3.next_to(step2, DOWN, buff=0.5)
self.play(Write(step3))

# Show final division process
arrow2 = Arrow(start=number_line.number_to_point(16), end=number_line.number_to_point(0), color=RED)
self.play(Create(arrow2))

# Display final result
result = Text("Result: 96 รท 8 = 12").scale(1.2)
result.next_to(step3, DOWN, buff=1)
self.play(Write(result))

# Clean up
