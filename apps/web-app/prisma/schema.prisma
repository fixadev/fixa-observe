// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  clerkId    String      @unique
  email      String      @unique
  firstName  String?
  lastName   String?
  projects   Project[]
  properties Property[]
  attributes Attribute[]
}

model Project {
  id        String   @id @default(uuid())
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  surveys   Survey[]
}

model Survey {
  id              String      @id @default(uuid())
  ownerId         String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  name            String
  projectId       String
  project         Project     @relation(fields: [projectId], references: [id])
  properties      Property[]
  attributesOrder Attribute[]
}

model Property {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  owner      User       @relation(fields: [ownerId], references: [id])
  ownerId    String
  address    String
  brochures  Brochure[]
  photoUrl   String?
  attributes Json?
  survey     Survey     @relation(fields: [surveyId], references: [id])
  surveyId   String
}

model Attribute {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  label     String
  type      String
  owner     User?    @relation(fields: [ownerId], references: [id])
  ownerId   String?
  Survey    Survey?  @relation(fields: [surveyId], references: [id])
  surveyId  String?
}

model Brochure {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  url        String
  title      String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
}
