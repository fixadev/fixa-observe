// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["multiSchema"]
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String      @id @default(uuid())
  clerkId    String      @unique
  email      String      @unique
  firstName  String?
  lastName   String?
  projects   Project[]
  properties Property[]
  attributes Attribute[]
}

model Project {
  id        String   @id @default(uuid())
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  surveys   Survey[]
}

model Survey {
  id         String                @id @default(uuid())
  ownerId    String
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  name       String
  projectId  String
  project    Project               @relation(fields: [projectId], references: [id])
  properties Property[]
  attributes AttributesOnSurveys[]
}

model Attribute {
  id        String                @id @default(uuid())
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  label     String
  type      String
  owner     User?                 @relation(fields: [ownerId], references: [id])
  ownerId   String?
  surveys   AttributesOnSurveys[]
}

model AttributesOnSurveys {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  attribute      Attribute @relation(fields: [attributeId], references: [id])
  attributeId    String
  attributeIndex Int
  survey         Survey    @relation(fields: [surveyId], references: [id])
  surveyId       String
}

model Property {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  owner        User         @relation(fields: [ownerId], references: [id])
  ownerId      String
  brochures    Brochure[]
  photoUrl     String?
  attributes   Json?
  displayIndex Int
  survey       Survey       @relation(fields: [surveyId], references: [id])
  surveyId     String
  emailThread  EmailThread[]
}

model Brochure {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  url        String
  title      String
  approved   Boolean  @default(false)
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
}

model Email {
  id            String      @id // Should be the email id in Outlook
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  senderName    String
  senderEmail   String

  recipientName String
  recipientEmail String

  subject       String      @default("")
  body          String
  webLink       String

  emailThread   EmailThread @relation(fields: [emailThreadId], references: [id])
  emailThreadId String
}

model EmailThread {
  id               String   @id // Should be the conversationId in Outlook
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  emails           Email[]

  property         Property? @relation(fields: [propertyId], references: [id])
  propertyId       String?   

  draft            Boolean  @default(false)
  unread           Boolean  @default(false)
  completed        Boolean  @default(false)
  moreInfoNeeded   Boolean  @default(false)
  parsedAttributes Json?    @db.JsonB
}