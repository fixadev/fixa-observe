// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["multiSchema"]
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String  @id // Should be the clerkId
  email     String  @unique
  firstName String?
  lastName  String?

  emailSubscriptionId        String?
  emailSubscriptionExpiresAt DateTime?

  projects      Project[]
  properties    Property[]
  attributes    Attribute[]
  emailTemplate EmailTemplate?
}

model Project {
  id        String   @id @default(uuid())
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  surveys   Survey[]
}

model Survey {
  id        String   @id @default(uuid())
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  projectId  String
  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  properties Property[]
  columns    Column[]
}

model Column {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  displayIndex Int

  surveyId       String
  survey         Survey          @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  attributeId    String
  attribute      Attribute       @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  propertyValues PropertyValue[]
}

model Attribute {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  label          String
  defaultIndex   Int      @default(0)
  defaultVisible Boolean  @default(false)

  ownerId String?
  owner   User?    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  columns Column[]
}

model Property {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  address      String?
  photoUrl     String?
  displayIndex Int

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  propertyValues PropertyValue[]
  contacts       Contact[]
  emailThreads   EmailThread[]
  brochures      Brochure[]
}

model PropertyValue {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value String

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  columnId   String
  column     Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
}

model Brochure {
  id                  String   @id @default(uuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  url                 String
  exportedUrl         String?
  title               String
  approved            Boolean  @default(false)
  property            Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId          String
  inpaintedRectangles Json?    @db.JsonB
  textToRemove        Json?    @db.JsonB
  pathsToRemove       Json?    @db.JsonB
  undoStack           String[]
  deletedPages        Int[]
}

model Email {
  id        String   @id // Should be the email id in Outlook
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderName  String
  senderEmail String

  recipientName  String
  recipientEmail String

  subject String @default("")
  body    String
  webLink String

  isDraft Boolean @default(false)

  attachments Attachment[]

  emailThread   EmailThread @relation(fields: [emailThreadId], references: [id], onDelete: Cascade)
  emailThreadId String
}

model Attachment {
  id        String   @id // Should be the attachment id in Outlook
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  contentType String
  size        Int

  infoMessageDismissed Boolean @default(false) // Whether the info message about the attachment has been dismissed
  brochureReplaced     Boolean @default(false) // Whether the brochure has been replaced by this attachment

  email   Email  @relation(fields: [emailId], references: [id], onDelete: Cascade)
  emailId String
}

model EmailThread {
  id        String   @id // Should be the conversationId in Outlook
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emails Email[]

  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String

  unread           Boolean @default(false)
  parsedAttributes Json    @default("{}") @db.JsonB
}

model Contact {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  firstName  String
  lastName   String
  email      String
  phone      String?
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
}

model EmailTemplate {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  subject String
  body    String
}
