// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["multiSchema"]
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// model User {
//   id        String   @id // Should be the clerkId
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   email     String? @unique
//   username  String? @unique
//   firstName String?
//   lastName  String?
// }

model ApiKey {
  userId String @id
  apiKey String
}

model Agent {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId       String
  name          String
  phoneNumber   String
  githubRepoUrl String?
  systemPrompt  String

  enabledGeneralEvals Eval[]

  enabledTestAgents TestAgent[]
  scenarios         Scenario[]
  tests             Test[]
}

model Test {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String
  calls   Call[]

  gitBranch  String?
  gitCommit  String?
  runFromApi Boolean @default(false) // If true, the test was run via the API
}

model TestAgent {
  id          String  @id @default(uuid())
  ownerId     String?
  name        String
  headshotUrl String
  description String
  prompt      String

  agents Agent[]
  calls  Call[]
}

model Call {
  id                 String       @id @default(uuid())
  ownerId            String?
  customerCallId     String?
  status             CallStatus
  result             CallResult?
  failureReason      String?
  stereoRecordingUrl String
  monoRecordingUrl   String?
  startedAt          String?
  endedAt            String?
  evalResults        EvalResult[]

  test        Test?      @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId      String?
  testAgent   TestAgent? @relation(fields: [testAgentId], references: [id], onDelete: Cascade)
  testAgentId String?
  scenario    Scenario?  @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  scenarioId  String?

  messages Message[]
  errors   CallError[]
}

model Message {
  id               String @id @default(uuid())
  role             Role
  message          String @default("")
  time             Float  @default(0)
  endTime          Float  @default(0)
  secondsFromStart Float  @default(0)
  duration         Float  @default(0)
  name             String @default("")
  result           String @default("")
  toolCalls        Json   @default("[]")

  call   Call   @relation(fields: [callId], references: [id], onDelete: Cascade)
  callId String
}

model CallError {
  id               String  @id @default(uuid())
  secondsFromStart Float
  duration         Float
  type             String?
  description      String
  call             Call    @relation(fields: [callId], references: [id], onDelete: Cascade)
  callId           String
}

enum CallResult {
  success
  failure
}

enum Role {
  user
  bot
  system
  tool_calls
  tool_call_result
}

enum CallStatus {
  in_progress
  analyzing
  completed
}

model CallRecording {
  id        String   @id
  audioUrl  String
  createdAt DateTime @default(now())
  processed Boolean  @default(false)
}

model Scenario {
  id        String   @id @default(uuid())
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId   String
  createdAt DateTime @default(now())

  name            String
  instructions    String
  successCriteria String @default("")

  isNew Boolean @default(false)

  calls Call[]
  evals Eval[]

  @@map("Intent")
}

model Eval {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  name        String
  description String
  scenario    Scenario? @relation(fields: [scenarioId], references: [id])
  scenarioId  String?

  type       EvalType
  resultType EvalResultType

  evalResults EvalResult[]

  agent   Agent?  @relation(fields: [agentId], references: [id])
  agentId String?

  ownerId String?
}

model EvalResult {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  call   Call?   @relation(fields: [callId], references: [id])
  callId String?

  eval   Eval   @relation(fields: [evalId], references: [id], onDelete: Cascade)
  evalId String

  result           String
  success          Boolean
  secondsFromStart Float
  duration         Float
  type             EvalResultType
  details          String
}

enum EvalType {
  scenario
  general
}

enum EvalResultType {
  boolean
  number
  percentage
}
