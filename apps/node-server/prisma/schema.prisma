// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id // Should be the clerkId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String  @unique
  firstName String?
  lastName  String?
}

model Agent {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId       String
  name          String
  phoneNumber   String
  githubRepoUrl String?
  systemPrompt  String

  enabledTestAgents TestAgent[]
  intents           Intent[]
  tests             Test[]
}

model Test {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String
  calls   Call[]

  gitBranch String?
  gitCommit String?
}

model TestAgent {
  id          String  @id @default(cuid())
  ownerId     String?
  name        String
  headshotUrl String
  description String
  prompt      String

  agents Agent[]
  calls  Call[]
}

model Intent {
  id              String @id @default(cuid())
  name            String
  instructions    String
  successCriteria String @default("")

  agent   Agent   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String
  calls   Call[]
  isNew   Boolean @default(false)
}

model Call {
  id                 String      @id @default(cuid())
  ownerId            String?
  status             CallStatus
  result             CallResult?
  failureReason      String?
  stereoRecordingUrl String
  monoRecordingUrl   String?
  startedAt          String?
  endedAt            String?

  test        Test?      @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId      String?
  testAgent   TestAgent? @relation(fields: [testAgentId], references: [id], onDelete: Cascade)
  testAgentId String?
  intent      Intent?    @relation(fields: [intentId], references: [id], onDelete: Cascade)
  intentId    String?

  messages Message[]
  errors   CallError[]
}

model Message {
  id               String @id @default(cuid())
  role             Role
  message          String @default("")
  time             Float  @default(0)
  endTime          Float  @default(0)
  secondsFromStart Float  @default(0)
  duration         Float  @default(0)
  name             String @default("")
  result           String @default("")
  toolCalls        Json   @default("[]")

  call   Call   @relation(fields: [callId], references: [id], onDelete: Cascade)
  callId String
}

model CallError {
  id               String  @id @default(cuid())
  secondsFromStart Float
  duration         Float
  type             String?
  description      String
  call             Call    @relation(fields: [callId], references: [id], onDelete: Cascade)
  callId           String
}

enum CallResult {
  success
  failure
}

enum Role {
  user
  bot
  system
  tool_calls
  tool_call_result
}

enum CallStatus {
  in_progress
  analyzing
  completed
}

model CallRecording {
  id        String   @id
  audioUrl  String
  createdAt DateTime @default(now())
  processed Boolean  @default(false)
}
