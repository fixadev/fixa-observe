// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["multiSchema"]
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id // Should be the clerkId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String  @unique
  firstName String?
  lastName  String?
}

model Agent {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId       String
  name          String
  phoneNumber   String
  githubRepoUrl String?
  systemPrompt  String

  enabledTestAgents TestAgent[]
  intents           Intent[]
  tests             Test[]
}

model Test {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agent   Agent  @relation(fields: [agentId], references: [id])
  agentId String
  calls   Call[]
}

model TestAgent {
  id          String  @id @default(cuid())
  ownerId     String?
  name        String
  headshotUrl String
  description String
  prompt      String

  agents Agent[]
  calls  Call[]
}

model Intent {
  id           String @id @default(cuid())
  name         String
  instructions String

  agent   Agent  @relation(fields: [agentId], references: [id])
  agentId String
  calls   Call[]
}

model Call {
  id                 String      @id @default(cuid())
  status             CallStatus
  result             CallResult?
  failureReason      String?
  stereoRecordingUrl String

  test        Test      @relation(fields: [testId], references: [id])
  testId      String
  testAgent   TestAgent @relation(fields: [testAgentId], references: [id])
  testAgentId String
  intent      Intent    @relation(fields: [intentId], references: [id])
  intentId    String

  messages Message[]
  errors   CallError[]
}

model Message {
  id               String @id @default(cuid())
  role             Role
  message          String
  time             Float
  endTime          Float
  secondsFromStart Float
  duration         Float

  call   Call   @relation(fields: [callId], references: [id])
  callId String
}

model CallError {
  id               String  @id @default(cuid())
  secondsFromStart Float
  duration         Float
  type             String?
  description      String
  call             Call    @relation(fields: [callId], references: [id])
  callId           String
}

enum CallResult {
  success
  failure
}

enum Role {
  user
  bot
  system
}

enum CallStatus {
  in_progress
  completed
}
